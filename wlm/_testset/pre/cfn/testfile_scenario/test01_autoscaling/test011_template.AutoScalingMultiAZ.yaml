heat_template_version: 2013-05-23

description: >
  FJ WLM(cfn) PRE_STAGING: AWS CloudFormation Sample Template AutoScalingMultiAZSample: Create a multi-az, load balanced and Auto Scaled sample web site running on an Apache Web Server with PHP. The application is configured to span all Availability Zones in the region and is Auto-Scaled based on the CPU utilization of the web servers. The instances are load balanced with a simple health check against the default web page. The web site is available on port 80, however, the instances can be configured to listen on any port (8888 by default). **WARNING** This template creates one or more Amazon EC2 instances and an Elastic Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.

parameters:
  InstanceType:
    description: WebServer EC2 instance type
    type: string
    default: m1.small
    constraints:
      - allowed_values:
        - m1.small
        - m1.medium
        - m1.large

  AWSRegionArch2AMI:
    description: AWS Region
    type: string
    default:  jp-east-1a
    constraints:
      - allowed_values:
        - jp-east-1a
        - us-east-1
        - us-west-1
        - us-west-2

  InstanceImages:
    description: instance image
    type: string
    default: centos-6.5-64bit-en-global-30g-20140908-1.0-simple
    constraints:
      - allowed_values:
        - soken00image-webserver-20140925
        - CentOS-6.5-mini_20141029
        - centos-6.5-64bit-en-global-30g-20140908-1.0-simple


  WebServerPort:
    description: The TCP port for the Web Server
    type: number
    default: 8888

  KeyName:
    description: The EC2 Key Pair to allow SSH access to the instances
    type: string

  SSHLocation:
    description: The IP address range that can be used to SSH to the EC2 instances
    type: string
    default: 0.0.0.0/0
    constraints:
      - length: { min: 9, max: 18 }
        description: must be between 9 and 18 characters
      - allowed_pattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        description: must be a valid IP CIDR range of the form x.x.x.x/x.


resources:
  WebServer:
    type: OS::Nova::Server
    properties:
      image: { get_param: InstanceImages }
      flavor: { get_param: InstanceType }
      user_data: { get_param: WebServerPort }
      security_groups: [ { get_resource: InstanceSecurityGroup } ]
      key_name: { get_param: KeyName }


  WebServerGroup:
    type: OS::Heat::AutoScalingGroup
    properties:
      resource: { get_resource: LaunchConfig }
      min_size: 1
      max_size: 3


  LaunchConfig:
    type: OS::Heat::InstanceGroup
    properties:
      AvailabilityZones: { get_param: AWSRegionArch2AMI }
      LaunchConfigurationName: launchConfigname
      LoadBalancerNames: { get_resource: ElasticLoadBalancer }
      Size: 3


  WebServerScaleUpPolicy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: WebServerGroup }
      cooldown: 60
      scaling_adjustment: 1


  WebServerScaleDownPolicy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: WebServerGroup }
      cooldown: 60
      scaling_adjustment: -1



  CPUAlarmHigh:
#    type: AWS::CloudWatch::Alarm
    type: OS::Heat::CWLiteAlarm
    properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions: [ { get_resource: WebServerScaleUpPolicy } ]
      Dimensions: [ { get_resource: WebServerGroup } ]
      ComparisonOperator: GreaterThanThreshold


  CPUAlarmLow:
    type: AWS::CloudWatch::Alarm
#    type: OS::Heat::CWLiteAlarm
    properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions: [ { get_resource: WebServerScaleDownPolicy } ]
      Dimensions: [ { get_resource: WebServerGroup } ]
      ComparisonOperator: LessThanThreshold



#  ElasticLoadBalancer:
#    type: AWS::ElasticLoadBalancing::LoadBalancer
#    properties:
#      availabilityZones: { get_param: AWSRegionArch2AMI }
#      Listeners:
#        LoadBalancerPort: 80
#        InstancePort: { get_resource: WebServerPort }
#        Protocol: HTTP
#      HealthCheck:
#        Target:
#          str_replace:
#            template: HTTP:$serverport/
#            params:
#              $serverport: { get_resource: WebServerPort }
#        HealthyThreshold: 3
#        UnhealthyThreshold: 5
#        Interval: 30
#        Timeout: 5


  ElasticLoadBalancer:
    type: OS::Neutron::LoadBalancer
    properties:
      members: [ { get_resource: WebServer } ]
#      pool_id:
##      protocol_port: HTTP
      protocol_port: 80

  HealthMonitor:
    type: OS::Neutron::HealthMonitor
    properties:
#      admin_state_up: True
      delay: 30
#     expected_codes: 200
      http_method: GET
      max_retries: 3
      timeout: 5
      type: HTTP
      url_path: /



  InstanceSecurityGroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable SSH access and HTTP from the load balancer only
#      SecurityGroupIngress: [ {
#        "IpProtocol" : "tcp",
#        "FromPort" : "22",
#        "ToPort" : "22",
#        "CidrIp" : { get_param: SSHLocation }
#      }
#      {
#        "IpProtocol" : "tcp"
#        "FromPort" : { get_resource: WebServerPort }
#        "ToPort" : { get_resource: WebServerPort }
#         "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]}
#         "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
#      } ]
      rules: [
#        {
#          "direction": "ingress, egress",
#          "ethertype": "IPv4, IPv6",
#          "port_range_max": "22",
#          "port_range_min": "22",
#          "protocol": "tcp",
#          "remote_group_id"; "",
#          "remote_ip_prefix": "",
#          "remote_mode": "remote_ip_prefix, remote_group_id"
#        }
        {
          "direction": "ingress",
          "ethertype": "IPv4",
          "port_range_max": "22",
          "port_range_min": "22",
          "protocol": "tcp",
          "remote_ip_prefix": { get_param: SSHLocation },
          "remote_mode": "remote_ip_prefix, remote_group_id"
        },
        {
          "direction": "ingress",
          "ethertype": "IPv4",
          "port_range_max": { get_param: WebServerPort },
          "port_range_min": { get_param: WebServerPort },
          "protocol": "tcp",
          "remote_group_id": { get_attr: [ ElasticLoadBalancer, pool_id ] },
          "remote_mode": "remote_ip_prefix, remote_group_id"
        }
      ]



outputs:
  URL:
    description: The URL of the website
    value:
      str_replace:
        template: http://$host
        params:
          $host: { get_attr: [ ElasticLoadBalancer, first_address ]}


